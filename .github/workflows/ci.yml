name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Ensure latest version is used

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'  # Use a stable version
      
      - name: Debug Python Path
        run: echo "PYTHONPATH is $PYTHONPATH"
      
        


        
      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: venv  # Cache the virtual environment
          key: venv-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            venv-${{ runner.os }}-

      - name: Install dependencies (if cache is not found)
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install --upgrade fastapi starlette httpx


      - name: Run tests
        working-directory: backend
        run: |
          source ../venv/bin/activate
          export PYTHONPATH="$PWD"
          pytest tests --verbose --rootdir=.


      - name: Lint code
        run: |
          source venv/bin/activate
          flake8 .

      - name: Check for security vulnerabilities
        run: |
          source venv/bin/activate
          safety check

      - name: Notify success
        if: success()
        run: echo "✅ CI Pipeline executed successfully!"

      - name: Notify failure
        if: failure()
        run: echo "❌ CI Pipeline failed!"
